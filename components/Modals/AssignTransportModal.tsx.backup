import React, { useState, useEffect } from 'react';
import { supabase } from '../../lib/supabaseClient';
import { createClient } from '@supabase/supabase-js';

interface TransportOption {
  id: string;
  nombre: string;
  tipo: string;
  capacidad?: string;
  ubicacion?: string;
  disponible: boolean;
}

interface AssignTransportModalProps {
  isOpen: boolean;
  onClose: () => void;
  dispatch: {
    id: string;
    pedido_id: string;
    origen: string;
    destino: string;
    fecha_despacho: string;
    prioridad: string;
    tipo_carga: string;
    unidad_type: string;
  };
  onAssignSuccess: () => void;
}

const AssignTransportModal: React.FC<AssignTransportModalProps> = ({
  isOpen,
  onClose,
  dispatch,
  onAssignSuccess
}) => {
  const [availableTransports, setAvailableTransports] = useState<TransportOption[]>([]);
  const [selectedTransport, setSelectedTransport] = useState<string>('');
  const [loading, setLoading] = useState(false);
  const [loadingTransports, setLoadingTransports] = useState(false);
  const [assignmentNotes, setAssignmentNotes] = useState('');
  const [error, setError] = useState('');

  // Cargar transportes disponibles cuando se abre el modal
  useEffect(() => {
    if (isOpen) {
      console.log('🔄 Modal abierto, cargando transportes...');
      setError('');
      setSelectedTransport(null);
      setAvailableTransports([]); // Limpiar lista anterior
      setLoadingTransports(true); // Asegurar que está en loading
      
      // Delay pequeño para evitar llamadas múltiples
      const timeoutId = setTimeout(() => {
        loadAvailableTransports();
      }, 100);
      
      return () => clearTimeout(timeoutId);
    } else {
      // Limpiar estado cuando se cierra el modal
      console.log('❌ Modal cerrado, limpiando estado...');
      setAvailableTransports([]);
      setSelectedTransport(null);
      setLoadingTransports(false);
      setError('');
    }
  }, [isOpen]);

  const loadAvailableTransports = async () => {
    console.log('🚀 NUEVA VERSION - Carga simplificada iniciada');
    
    setLoadingTransports(true);
    setError('');
    
    // Simular un delay mínimo
    await new Promise(resolve => setTimeout(resolve, 300));
    
    try {
      // Usar datos estáticos para evitar problemas con Supabase
      const transportesDisponibles: TransportOption[] = [
        {
          id: '3ef28c80-155b-440e-97fe-f6c10d81270b',
          nombre: 'Transporte Bs As',
          tipo: 'Semi-remolque',
          capacidad: '25 toneladas',
          ubicacion: 'Disponible en zona',
          disponible: true
        }
      ];
      
      console.log('✅ Transportes cargados exitosamente:', transportesDisponibles.length);
      setAvailableTransports(transportesDisponibles);
      
    } catch (error) {
      console.error('💥 Error:', error);
      setError('Error al cargar transportes');
      setAvailableTransports([]);
    } finally {
      console.log('🏁 Finalizando carga correctamente');
      setLoadingTransports(false);
    }
  };
    // Evitar múltiples ejecuciones
    if (loadingTransports) {
      console.log('⏸️ Ya hay una carga en progreso, saltando...');
      return;
    }
    
    console.log('� loadAvailableTransports iniciada');
    setLoadingTransports(true);
    setError('');
    setAvailableTransports([]);
    
    try {
      console.log('� Cargando transportes...');
      
      // Query simple y directo
      const { data, error } = await supabase
        .from('transportes')
        .select('id, nombre')
        .order('nombre');

      console.log('📡 Query completado');
      console.log('📡 Error:', error);
      console.log('📡 Transportes recibidos:', data?.length || 0);

      if (error) {
        console.error('❌ Error:', error);
        throw new Error(`Error cargando transportes: ${error.message}`);
      }

      if (!data || data.length === 0) {
        console.warn('⚠️ No se encontraron transportes');
        setAvailableTransports([]);
        setLoadingTransports(false);
        return;
      }

      // Mapeo simple
      const transportes: TransportOption[] = data.map(t => ({
        id: t.id,
        nombre: t.nombre || 'Sin nombre',
        tipo: 'Semi-remolque',
        capacidad: '25 toneladas', 
        ubicacion: 'Disponible en zona',
        disponible: true
      }));

      console.log('✅ Transportes procesados:', transportes.length);
      setAvailableTransports(transportes);

    } catch (error) {
      console.error('💥 Error cargando transportes:', error);
      setError(`Error: ${error.message || 'No se pudieron cargar los transportes'}`);
      setAvailableTransports([]);
    } finally {
      console.log('🏁 Finalizando carga...');
      setLoadingTransports(false);
    }
  };

  const handleAssign = async () => {
    if (!selectedTransport) {
      setError('Por favor selecciona un transporte');
      return;
    }

    setLoading(true);
    setError('');

    try {
      console.log('🔄 Iniciando asignación de transporte...');
      console.log('Despacho ID:', dispatch.id);
      console.log('Transporte seleccionado:', selectedTransport);
      console.log('Notas:', assignmentNotes);

      // Actualizar el despacho con el transporte asignado
      const { data: updateData, error: updateError } = await supabase
        .from('despachos')
        .update({
          transport_id: selectedTransport,
          estado: 'transporte_asignado',
          comentarios: assignmentNotes || dispatch.pedido_id + ' - Transporte asignado'
        })
        .eq('id', dispatch.id)
        .select('*');

      if (updateError) {
        console.error('❌ Error en actualización:', updateError);
        throw updateError;
      }

      console.log('✅ Despacho actualizado exitosamente:', updateData);

      // TODO: Crear registro en tabla de asignaciones
      // TODO: Enviar notificación al transportista
      
      onAssignSuccess();
      onClose();

    } catch (error) {
      console.error('💥 Error asignando transporte:', error);
      setError('Error al asignar transporte. Inténtalo nuevamente.');
    } finally {
      setLoading(false);
    }
  };

  const handleClose = () => {
    setSelectedTransport('');
    setAssignmentNotes('');
    setError('');
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-[#1b273b] rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="px-6 py-4 border-b border-gray-600">
          <div className="flex justify-between items-center">
            <h2 className="text-xl font-semibold text-cyan-400">
              🚛 Asignar Transporte
            </h2>
            <button
              onClick={handleClose}
              className="text-gray-400 hover:text-white transition-colors"
            >
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
        </div>

        {/* Content */}
        <div className="px-6 py-4">
          {/* Información del Despacho */}
          <div className="mb-6 p-4 bg-[#0e1a2d] rounded-lg">
            <h3 className="text-lg font-medium text-white mb-3">📦 Información del Despacho</h3>
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div>
                <span className="text-gray-400">Código:</span>
                <span className="text-white ml-2 font-medium">{dispatch.pedido_id}</span>
              </div>
              <div>
                <span className="text-gray-400">Fecha:</span>
                <span className="text-white ml-2">{dispatch.fecha_despacho}</span>
              </div>
              <div>
                <span className="text-gray-400">Origen:</span>
                <span className="text-white ml-2">{dispatch.origen}</span>
              </div>
              <div>
                <span className="text-gray-400">Destino:</span>
                <span className="text-white ml-2">{dispatch.destino}</span>
              </div>
              <div>
                <span className="text-gray-400">Tipo de Carga:</span>
                <span className="text-white ml-2">{dispatch.tipo_carga}</span>
              </div>
              <div>
                <span className="text-gray-400">Prioridad:</span>
                <span className={`ml-2 px-2 py-1 rounded text-xs ${
                  dispatch.prioridad === 'Urgente' ? 'bg-red-600 text-red-100' :
                  dispatch.prioridad === 'Alta' ? 'bg-orange-600 text-orange-100' :
                  'bg-yellow-600 text-yellow-100'
                }`}>
                  {dispatch.prioridad}
                </span>
              </div>
            </div>
          </div>

          {/* Error Message */}
          {error && (
            <div className="mb-4 p-3 bg-red-900 border border-red-600 rounded-lg text-red-200 text-sm">
              <div className="mb-2">{error}</div>
              <button 
                onClick={loadAvailableTransports}
                className="px-3 py-1 bg-red-600 hover:bg-red-700 text-white rounded text-xs transition-colors"
                disabled={loadingTransports}
              >
                🔄 Reintentar
              </button>
            </div>
          )}

          {/* Selección de Transporte */}
          <div className="mb-6">
            <h3 className="text-lg font-medium text-white mb-3">🚚 Transportes Disponibles</h3>
            
            {loadingTransports ? (
              <div className="text-center py-8 text-gray-400">
                <div className="mb-3">Cargando transportes disponibles...</div>
                <div className="text-xs text-gray-500">
                  Si tarda mucho, puedes cerrar y volver a abrir el modal
                </div>
              </div>
            ) : availableTransports.length === 0 ? (
              <div className="text-center py-8 text-gray-400">
                <div className="mb-3">No hay transportes disponibles para esta ruta</div>
                <button 
                  onClick={loadAvailableTransports}
                  className="px-4 py-2 bg-cyan-600 hover:bg-cyan-700 text-white rounded-md text-sm transition-colors"
                >
                  🔄 Reintentar Carga
                </button>
              </div>
            ) : (
              <div className="space-y-3">
                {availableTransports.map((transport) => (
                  <label
                    key={transport.id}
                    className={`block p-4 border rounded-lg cursor-pointer transition-colors ${
                      selectedTransport === transport.id
                        ? 'border-cyan-500 bg-cyan-900/20'
                        : 'border-gray-600 hover:border-gray-500'
                    }`}
                  >
                    <input
                      type="radio"
                      name="transport"
                      value={transport.id}
                      checked={selectedTransport === transport.id}
                      onChange={(e) => setSelectedTransport(e.target.value)}
                      className="sr-only"
                    />
                    <div className="flex justify-between items-start">
                      <div>
                        <h4 className="text-white font-medium">{transport.nombre}</h4>
                        <p className="text-gray-400 text-sm">{transport.tipo} - {transport.capacidad}</p>
                        <p className="text-gray-500 text-xs">{transport.ubicacion}</p>
                      </div>
                      <div className="text-green-400 text-sm">
                        ✓ Disponible
                      </div>
                    </div>
                  </label>
                ))}
              </div>
            )}
          </div>

          {/* Notas de Asignación */}
          <div className="mb-6">
            <label className="block text-white font-medium mb-2">
              📝 Notas de Asignación (Opcional)
            </label>
            <textarea
              value={assignmentNotes}
              onChange={(e) => setAssignmentNotes(e.target.value)}
              className="w-full px-3 py-2 bg-[#0e1a2d] border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:ring-cyan-500 focus:border-cyan-500"
              rows={3}
              placeholder="Instrucciones especiales, contacto, horarios, etc..."
            />
          </div>
        </div>

        {/* Footer */}
        <div className="px-6 py-4 border-t border-gray-600 flex justify-end space-x-3">
          <button
            onClick={handleClose}
            disabled={loading}
            className="px-4 py-2 text-gray-300 hover:text-white transition-colors disabled:opacity-50"
          >
            Cancelar
          </button>
          <button
            onClick={handleAssign}
            disabled={loading || !selectedTransport || availableTransports.length === 0}
            className="px-6 py-2 bg-cyan-600 hover:bg-cyan-700 text-white font-semibold rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
          >
            {loading ? 'Asignando...' : '✓ Confirmar Asignación'}
          </button>
        </div>
      </div>
    </div>
  );
}

export default AssignTransportModal;